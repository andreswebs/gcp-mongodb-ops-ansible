#!/usr/bin/env ansible-playbook
---
- name: MongoDB

  hosts:
    - vm_tag_db

  become: yes
  become_user: root

  vars:
    data_disk_path: /mnt/secure
    mongodb_storage_path: "{{ data_disk_path }}/mongodb"

    mongodb_replica_set_name: rs1 # PROD: us1
    # mongodb_replica_set_name: rseu

    mongodb_tls_dir: /etc/mongodb-tls

    mongodb_file_ca_crt: ca.crt
    mongodb_file_tls_crt: wildcard.planhat.dev.crt
    mongodb_file_tls_key: wildcard.planhat.dev.key
    mongodb_file_tls_pem: wildcard.planhat.dev.pem

    mongodb_secret_name_ca_crt: ca_crt

    mongodb_secret_name_tls_crt: wildcard_planhat_dev_crt
    mongodb_secret_name_tls_key: wildcard_planhat_dev_key
    mongodb_secret_name_tls_pem: wildcard_planhat_dev_pem

    mongodb_secret_name_tls_key_password: wildcard_planhat_dev_key_pw
    # mongodb_secret_name_tls_key_password: PEMKeyPassword

    # mongodb_secret_name_ca_crt: demo_ca_crt
    # mongodb_secret_name_tls_crt: demo_tls_crt
    # mongodb_secret_name_tls_key: demo_tls_key
    # mongodb_secret_name_tls_pem: demo_tls_pem
    # mongodb_secret_name_tls_key_password: demo_tls_key_pw

    mongodb_admin_username: mongoAdmin

    mongodb_domain_name: planhat.dev

  tasks:

    - name: Wait for VMs to start
      wait_for_connection:

    - name: Upgrade system
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      async: 3600
      poll: 5
      when: upgrade_system | default(false) | bool
      tags:
        - system

    - ansible.builtin.import_role:
        name: googlecloudplatform.google_cloud_ops_agents
      vars:
        agent_type: ops-agent
        main_config_file: ops-agent.config.yml
      tags:
        - google-ops-agent

    # ## TODO:
    # # Set up GCP ops agent config
    # # https://cloud.google.com/stackdriver/docs/solutions/agents/ops-agent/third-party/mongodb
    # - name: "Retrieve secret {{ mongodb_secret_name_monitor_password }}"
    #   ansible.builtin.command: "gcloud secrets versions access latest --secret {{ mongodb_secret_name_monitor_password }}"
    #   connection: local
    #   delegate_to: localhost
    #   become: no
    #   run_once: true
    #   check_mode: false
    #   changed_when: false
    #   no_log: "{{ not (display_diff_secrets | default(false) | bool) }}"
    #   register: mongodb_monitor_password
    #   environment:
    #     CLOUDSDK_CORE_PROJECT: "{{ lookup('ansible.builtin.env', 'CLOUDSDK_CORE_PROJECT') }}"
    #   tags:
    #     - google-ops-agent
    #     - google-ops-agent-config

    # - name: Set /etc/google-cloud-ops-agent/config.yaml
    #   ansible.builtin.template:
    #     src: ops-agent.config.yml.j2
    #     dest: /etc/google-cloud-ops-agent/config.yaml
    #     owner: root
    #     group: root
    #     mode: '0644'
    #   no_log: "{{ not (display_diff_secrets | default(false) | bool) }}"
    #   notify:
    #     - systemctl restart google-cloud-ops-agent
    #   tags:
    #     - google-ops-agent
    #     - google-ops-agent-config

    # # DEPRECATED:
    # - ansible.builtin.import_role:
    #     name: www-user

    - ansible.builtin.import_role:
        name: extra-disk
      vars:
        extra_disk_mount_path: "{{ data_disk_path }}"
      tags:
        - mongodb

    - ansible.builtin.import_role:
        name: nodejs

    - ansible.builtin.import_role:
        name: mongodb-replicaset

    - ansible.builtin.import_role:
        name: mongodb-gcp-snapshots

    - name: Check if a reboot is required
      ansible.builtin.shell: "[ -f /var/run/reboot-required ]"
      failed_when: false
      register: reboot_required
      changed_when: reboot_required.rc == 0
      notify:
        - reboot
      tags:
        - system

  handlers:

    - name: reboot
      ansible.builtin.reboot:
        msg: Maintenance reboot initiated

    - ansible.builtin.import_tasks: handlers/main.yml
