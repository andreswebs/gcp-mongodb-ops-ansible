#!/usr/bin/env ansible-playbook
---
- name: MongoDB

  hosts: all
  become: yes
  become_user: root

  vars:
    data_disk_path: /mnt/secure

  tasks:

    - name: Wait for VMs to start
      wait_for_connection:

    # System update
    - name: Upgrade system
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      async: 3600
      poll: 5
      tags:
        - system

    - ansible.builtin.import_role:
        name: secure-disk
      vars:
        secure_disk_mount_path: "{{ data_disk_path }}"
      tags:
        - mongodb

    # # DEPRECATED:
    # - ansible.builtin.import_role:
    #     name: www-user

    - ansible.builtin.import_role:
        name: mongodb-replicaset
      vars:
        mongodb_storage_path: "{{ data_disk_path }}/mongodb"
        mongodb_replica_set: rseu
        mongodb_secret_name_tls_keypassword: PEMKeyPassword
        mongodb_file_ca_crt: ca.crt
        mongodb_file_tls_crt: wildcard.planhat.dev.crt
        mongodb_file_tls_key: wildcard.planhat.dev.key
        mongodb_file_tls_pem: wildcard.planhat.dev.pem
        mongodb_secret_name_ca_crt: ca_crt
        mongodb_secret_name_tls_crt: wildcard_planhat_dev_crt
        mongodb_secret_name_tls_key: wildcard_planhat_dev_key
        mongodb_secret_name_tls_pem: wildcard_planhat_dev_pem

    - ansible.builtin.import_role:
        name: nodejs

    - name: Check if a reboot is required
      ansible.builtin.shell: "[ -f /var/run/reboot-required ]"
      failed_when: false
      register: reboot_required
      changed_when: reboot_required.rc == 0
      notify:
        - reboot
      tags:
        - system

  handlers:

    - name: reboot
      ansible.builtin.reboot:
        msg: Maintenance reboot initiated

